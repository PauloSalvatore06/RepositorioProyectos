CCS PCM C Compiler, Version 5.015, 5967               02-may.-19 08:54

               Filename:   C:\Users\Paulo\Documents\MEGAsync\Trabajos de la escuela\CETI\8° Semestre\Electrónica Digital V\Practica 6.- Comunicación Serial\Programación PIC CON LCD\Practica 6 LCD.lst

               ROM used:   471 words (6%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           32 (9%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   189
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   059
.................... /* Práctica 6: Comunicación Serial. PIC CON EL LCD 
....................    Paulo Salvatore Partida Escamilla 15300210 
....................    Miriam Cristina Aviña Alatorre 15300829 
.................... */ 
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0051:  BCF    0A.0
0052:  BCF    0A.1
0053:  BCF    0A.2
0054:  ADDWF  02,F
0055:  RETLW  28
0056:  RETLW  0C
0057:  RETLW  01
0058:  RETLW  06
*
0061:  DATA D4,32
0062:  DATA 63,36
0063:  DATA 61,10
0064:  DATA 70,39
0065:  DATA E5,39
0066:  DATA E9,37
0067:  DATA EE,30
0068:  DATA E4,30
0069:  DATA 3A,05
006A:  DATA A5,31
006B:  DATA 20,10
006C:  DATA 20,10
006D:  DATA 20,10
006E:  DATA 20,10
006F:  DATA 20,10
0070:  DATA 20,10
0071:  DATA 20,10
0072:  DATA 20,10
0073:  DATA 20,10
0074:  DATA 00,00
*
0132:  MOVF   0B,W
0133:  MOVWF  2E
0134:  BCF    0B.7
0135:  BSF    03.5
0136:  BSF    03.6
0137:  BSF    0C.7
0138:  BSF    0C.0
0139:  NOP
013A:  NOP
013B:  BCF    03.5
013C:  BCF    03.6
013D:  BTFSC  2E.7
013E:  BSF    0B.7
013F:  BTFSC  03.0
0140:  GOTO   169
0141:  BSF    03.6
0142:  MOVF   0C,W
0143:  ANDLW  7F
0144:  BCF    03.6
0145:  MOVWF  2E
0146:  BSF    03.6
0147:  MOVF   0D,W
0148:  BCF    03.6
0149:  MOVWF  2F
014A:  BSF    03.6
014B:  MOVF   0F,W
014C:  BCF    03.6
014D:  MOVWF  30
014E:  MOVF   2E,W
014F:  MOVWF  31
0150:  CALL   10E
0151:  MOVF   2F,W
0152:  BSF    03.6
0153:  MOVWF  0D
0154:  BCF    03.6
0155:  MOVF   30,W
0156:  BSF    03.6
0157:  MOVWF  0F
0158:  BCF    03.6
0159:  MOVF   0B,W
015A:  MOVWF  31
015B:  BCF    0B.7
015C:  BSF    03.5
015D:  BSF    03.6
015E:  BSF    0C.7
015F:  BSF    0C.0
0160:  NOP
0161:  NOP
0162:  BCF    03.5
0163:  BCF    03.6
0164:  BTFSC  31.7
0165:  BSF    0B.7
0166:  DECFSZ 2D,F
0167:  GOTO   169
0168:  GOTO   188
0169:  BSF    03.6
016A:  RLF    0C,W
016B:  RLF    0E,W
016C:  ANDLW  7F
016D:  BCF    03.6
016E:  MOVWF  2E
016F:  BSF    03.6
0170:  MOVF   0D,W
0171:  BCF    03.6
0172:  MOVWF  2F
0173:  BSF    03.6
0174:  MOVF   0F,W
0175:  BCF    03.6
0176:  MOVWF  30
0177:  MOVF   2E,W
0178:  MOVWF  31
0179:  CALL   10E
017A:  MOVF   2F,W
017B:  BSF    03.6
017C:  MOVWF  0D
017D:  BCF    03.6
017E:  MOVF   30,W
017F:  BSF    03.6
0180:  MOVWF  0F
0181:  INCF   0D,F
0182:  BTFSC  03.2
0183:  INCF   0F,F
0184:  BCF    03.0
0185:  BCF    03.6
0186:  DECFSZ 2D,F
0187:  GOTO   132
0188:  RETURN
....................  
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
0075:  MOVLW  32
0076:  MOVWF  04
0077:  BCF    03.7
0078:  MOVF   00,W
0079:  BTFSC  03.2
007A:  GOTO   089
007B:  MOVLW  01
007C:  MOVWF  78
007D:  CLRF   77
007E:  DECFSZ 77,F
007F:  GOTO   07E
0080:  DECFSZ 78,F
0081:  GOTO   07D
0082:  MOVLW  4A
0083:  MOVWF  77
0084:  DECFSZ 77,F
0085:  GOTO   084
0086:  GOTO   087
0087:  DECFSZ 00,F
0088:  GOTO   07B
0089:  RETURN
.................... #include <lcd1.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0097:  MOVLW  F0
0098:  BSF    03.5
0099:  MOVWF  06
....................       lcd.rw = 1; 
009A:  BCF    03.5
009B:  BSF    06.2
....................       delay_cycles(1); 
009C:  NOP
....................       lcd.enable = 1; 
009D:  BSF    06.0
....................       delay_cycles(1); 
009E:  NOP
....................       high = lcd.data; 
009F:  MOVF   06,W
00A0:  SWAPF  06,W
00A1:  ANDLW  0F
00A2:  MOVWF  39
....................       lcd.enable = 0; 
00A3:  BCF    06.0
....................       delay_cycles(1); 
00A4:  NOP
....................       lcd.enable = 1; 
00A5:  BSF    06.0
....................       delay_us(1); 
00A6:  NOP
....................       low = lcd.data; 
00A7:  MOVF   06,W
00A8:  SWAPF  06,W
00A9:  ANDLW  0F
00AA:  MOVWF  38
....................       lcd.enable = 0; 
00AB:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
00AC:  MOVLW  00
00AD:  BSF    03.5
00AE:  MOVWF  06
....................       return( (high<<4) | low); 
00AF:  BCF    03.5
00B0:  SWAPF  39,W
00B1:  MOVWF  77
00B2:  MOVLW  F0
00B3:  ANDWF  77,F
00B4:  MOVF   77,W
00B5:  IORWF  38,W
00B6:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
008A:  SWAPF  39,W
008B:  ANDLW  F0
008C:  MOVWF  77
008D:  MOVLW  0F
008E:  ANDWF  06,W
008F:  IORWF  77,W
0090:  MOVWF  06
....................       delay_cycles(1); 
0091:  NOP
....................       lcd.enable = 1; 
0092:  BSF    06.0
....................       delay_us(2); 
0093:  GOTO   094
....................       lcd.enable = 0; 
0094:  BCF    06.0
0095:  RETURN
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0096:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B7:  MOVF   78,W
00B8:  MOVWF  38
00B9:  BTFSC  38.7
00BA:  GOTO   097
....................       lcd.rs = address; 
00BB:  BTFSS  36.0
00BC:  BCF    06.1
00BD:  BTFSC  36.0
00BE:  BSF    06.1
....................       delay_cycles(1); 
00BF:  NOP
....................       lcd.rw = 0; 
00C0:  BCF    06.2
....................       delay_cycles(1); 
00C1:  NOP
....................       lcd.enable = 0; 
00C2:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
00C3:  SWAPF  37,W
00C4:  MOVWF  38
00C5:  MOVLW  0F
00C6:  ANDWF  38,F
00C7:  MOVF   38,W
00C8:  MOVWF  39
00C9:  CALL   08A
....................       lcd_send_nibble(n & 0xf); 
00CA:  MOVF   37,W
00CB:  ANDLW  0F
00CC:  MOVWF  38
00CD:  MOVWF  39
00CE:  CALL   08A
00CF:  RETURN
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00D0:  MOVLW  00
00D1:  BSF    03.5
00D2:  MOVWF  06
....................     lcd.rs = 0; 
00D3:  BCF    03.5
00D4:  BCF    06.1
....................     lcd.rw = 0; 
00D5:  BCF    06.2
....................     lcd.enable = 0; 
00D6:  BCF    06.0
....................     delay_ms(15); 
00D7:  MOVLW  0F
00D8:  MOVWF  32
00D9:  CALL   075
....................     for(i=1;i<=3;++i) { 
00DA:  MOVLW  01
00DB:  MOVWF  2D
00DC:  MOVF   2D,W
00DD:  SUBLW  03
00DE:  BTFSS  03.0
00DF:  GOTO   0E8
....................        lcd_send_nibble(3); 
00E0:  MOVLW  03
00E1:  MOVWF  39
00E2:  CALL   08A
....................        delay_ms(5); 
00E3:  MOVLW  05
00E4:  MOVWF  32
00E5:  CALL   075
00E6:  INCF   2D,F
00E7:  GOTO   0DC
....................     } 
....................     lcd_send_nibble(2); 
00E8:  MOVLW  02
00E9:  MOVWF  39
00EA:  CALL   08A
....................     for(i=0;i<=3;++i) 
00EB:  CLRF   2D
00EC:  MOVF   2D,W
00ED:  SUBLW  03
00EE:  BTFSS  03.0
00EF:  GOTO   0F9
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00F0:  MOVF   2D,W
00F1:  CALL   051
00F2:  MOVWF  2E
00F3:  CLRF   36
00F4:  MOVF   2E,W
00F5:  MOVWF  37
00F6:  CALL   096
00F7:  INCF   2D,F
00F8:  GOTO   0EC
00F9:  BCF    0A.3
00FA:  BCF    0A.4
00FB:  GOTO   1AE (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00FC:  DECFSZ 33,W
00FD:  GOTO   0FF
00FE:  GOTO   102
....................      address=lcd_line_two; 
00FF:  MOVLW  40
0100:  MOVWF  34
0101:  GOTO   103
....................    else 
....................      address=0; 
0102:  CLRF   34
....................    address+=x-1; 
0103:  MOVLW  01
0104:  SUBWF  32,W
0105:  ADDWF  34,F
....................    lcd_send_byte(0,0x80|address); 
0106:  MOVF   34,W
0107:  IORLW  80
0108:  MOVWF  35
0109:  CLRF   36
010A:  MOVF   35,W
010B:  MOVWF  37
010C:  CALL   096
010D:  RETURN
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
010E:  MOVF   31,W
010F:  XORLW  0C
0110:  BTFSC  03.2
0111:  GOTO   119
0112:  XORLW  06
0113:  BTFSC  03.2
0114:  GOTO   121
0115:  XORLW  02
0116:  BTFSC  03.2
0117:  GOTO   127
0118:  GOTO   12C
....................      case '\f'   : lcd_send_byte(0,1); 
0119:  CLRF   36
011A:  MOVLW  01
011B:  MOVWF  37
011C:  CALL   096
....................                    delay_ms(2); 
011D:  MOVLW  02
011E:  MOVWF  32
011F:  CALL   075
....................                                            break; 
0120:  GOTO   131
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0121:  MOVLW  01
0122:  MOVWF  32
0123:  MOVLW  02
0124:  MOVWF  33
0125:  CALL   0FC
0126:  GOTO   131
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0127:  CLRF   36
0128:  MOVLW  10
0129:  MOVWF  37
012A:  CALL   096
012B:  GOTO   131
....................      default     : lcd_send_byte(1,c);     break; 
012C:  MOVLW  01
012D:  MOVWF  36
012E:  MOVF   31,W
012F:  MOVWF  37
0130:  CALL   096
....................    } 
0131:  RETURN
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #use RS232(BAUD=9600,XMIT=PIN_C6,RCV=PIN_C7,BITS=8) 
.................... #fuses intrc_io,nowdt,noput,nomclr,noprotect,nocpd,nobrownout 
.................... #fuses noieso,nofcmen,nodebug,nowrt,borv21 
.................... #use fast_io(B) 
.................... #use fast_io(C) 
....................  
.................... char Teclapresionada; 
.................... #Int_RDA 
.................... void RDA_isr() 
.................... { 
....................    Teclapresionada=getc(); 
*
0059:  BTFSS  0C.5
005A:  GOTO   059
005B:  MOVF   1A,W
005C:  MOVWF  2B
005D:  BCF    0C.5
005E:  BCF    0A.3
005F:  BCF    0A.4
0060:  GOTO   02D
.................... } 
....................  
.................... void main() 
*
0189:  MOVF   03,W
018A:  ANDLW  1F
018B:  MOVWF  03
018C:  BSF    03.5
018D:  BSF    03.6
018E:  BCF    07.3
018F:  MOVLW  19
0190:  BCF    03.6
0191:  MOVWF  19
0192:  MOVLW  A6
0193:  MOVWF  18
0194:  MOVLW  90
0195:  BCF    03.5
0196:  MOVWF  18
0197:  BSF    03.5
0198:  BSF    03.6
0199:  MOVF   09,W
019A:  ANDLW  C0
019B:  MOVWF  09
019C:  BCF    03.6
019D:  BCF    1F.4
019E:  BCF    1F.5
019F:  MOVLW  00
01A0:  BSF    03.6
01A1:  MOVWF  08
01A2:  BCF    03.5
01A3:  CLRF   07
01A4:  CLRF   08
01A5:  CLRF   09
01A6:  BCF    03.7
.................... { 
....................    ENABLE_INTERRUPTS(INT_RDA); 
01A7:  BSF    03.5
01A8:  BCF    03.6
01A9:  BSF    0C.5
....................    ENABLE_INTERRUPTS(GLOBAL); 
01AA:  MOVLW  C0
01AB:  BCF    03.5
01AC:  IORWF  0B,F
....................    lcd_init(); 
01AD:  GOTO   0D0
....................    int led; 
....................    while(1) 
....................    { 
....................       lcd_gotoxy(1,1); 
01AE:  MOVLW  01
01AF:  MOVWF  32
01B0:  MOVWF  33
01B1:  CALL   0FC
....................       printf (lcd_putc, "Tecla presionada:\n%c                  ",Teclapresionada); 
01B2:  MOVLW  61
01B3:  BSF    03.6
01B4:  MOVWF  0D
01B5:  MOVLW  00
01B6:  MOVWF  0F
01B7:  BCF    03.0
01B8:  MOVLW  12
01B9:  BCF    03.6
01BA:  MOVWF  2D
01BB:  CALL   132
01BC:  MOVF   2B,W
01BD:  MOVWF  31
01BE:  CALL   10E
01BF:  MOVLW  6B
01C0:  BSF    03.6
01C1:  MOVWF  0D
01C2:  MOVLW  00
01C3:  MOVWF  0F
01C4:  BCF    03.0
01C5:  MOVLW  12
01C6:  BCF    03.6
01C7:  MOVWF  2D
01C8:  CALL   132
....................       If (Teclapresionada=='0') 
01C9:  MOVF   2B,W
01CA:  SUBLW  30
01CB:  BTFSS  03.2
01CC:  GOTO   1D0
....................       {led=1;} 
01CD:  MOVLW  01
01CE:  MOVWF  2C
01CF:  GOTO   1D1
....................       else   
....................       {led=0;} 
01D0:  CLRF   2C
....................       putchar(led); 
01D1:  MOVF   2C,W
01D2:  BTFSS  0C.4
01D3:  GOTO   1D2
01D4:  MOVWF  19
01D5:  GOTO   1AE
....................    } 
.................... } 
....................  
01D6:  SLEEP
....................  

Configuration Fuses:
   Word  1: 20D4   INTRC_IO NOWDT NOPUT NOMCLR NOPROTECT NOCPD NOBROWNOUT NOIESO NOFCMEN NOLVP NODEBUG
   Word  2: 3EFF   BORV21 NOWRT
